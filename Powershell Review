<# 1 #>
function q1($var1,$var2,$var3,$var4) {      #pass
    <# Return the product of the arguments #>
    $prod = $var1 * $var2 * $var3 * $var4
    return $prod
}
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row. Ignore $rows and $cols
       Return -1 if the key is not found.
    #>
   foreach($item in $arr) {
        if($item[0] -eq $key){
            return $item[9]
        }
    }
     return -1
}
function q3 {                                     #pass
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    $num = [array]0
    while ($num += (Read-Host -prompt "Enter positive ints")) {
        if ($num -eq -1) {
            break
        }
        else {
            $max = ($num | measure -Maximum).Maximum
       }
    }
     $max
OR
  $vals = @()
  do {
    $val = read-host
    if($val -ne -1) {
        $vals += $val
    }
  } until ($val = -1)
  return $($vals | measure-object -maximum).maximum
}
function q4($filename,$whichline) {             #pass
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
    Get-Content -Path $filename | select -First ($whichline + 1) | select -Last 1
OR
    return (get-content $filename)[$whichline]
}
function q5($path) {                  #pass
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
    Get-ChildItem -Path $path | Sort-Object Name
}
function q6 {                            #pass
    <# Return the sum of all elements provided on the pipeline
	#>
    $sum = 0
    foreach ($item in $Input) {
        $sum += $item
        }
        $sum
}
function q7 {                            #pass
	<# Return only those commands whose noun is process #>
    Get-Command -noun process
}
function q8($adjective) {                #pass
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
    Write-Output "PowerShell is $adjective"
}
function q9($addr) {                     #pass
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
    $pattern = '(?:(?:\d|[01]?\d\d|2[0-4]\d|25[0-5])\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d|\d)(?:\/\d{1,2})?'
    if ($addr -match $pattern) {
        $true
    }
    else {
        $false
    }
OR
    return [bool]($addr -as [ipaddress]
}
function q10 ($filepath,$lasthash) {      #pass
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
       $newhash = (Get-FileHash $filepath).Hash
       if ($newhash -ne $lasthash) {
            $true
       }
       else {
            $false
            }
OR
    return (get-filehash -algorithm sha256 $filepath).hash -ne $lasthash
}
