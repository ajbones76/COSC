Handbook - https://git.cybbh.space/programming/python/public/-/blob/master/activities/Python_Student_Handbook/PyStuHBK.adoc?ref_type=heads 
Setup Guide - https://cctc.cybbh.io/students/students/latest/Day_0_Setup

linux 10.50.40.185 use -X option  ssh student@10.50.40.185 -X (password is password) terminator
windows 10.50.30.94

touch "Scriptname".py
vim to edit
cat to display

vim .vimrc (press i to insert text):
syntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set number
filetype indent on
set autoindent

#!/usr/bin/env python3

python3 to run or ./(scriptname); give execution permissions chmod +x
ctrl + l to clear
quit() to exit back to ssh

======================================================================================================================================

index of -1 is last place
type(variable_name) to display type of variable
change variable type by putting type of variable wanted and then (variable_name) ex: bool(), int(), float(), str()
all commands in python needs ()
all strings use ''
square brackets [] are a list
parens () are a tuple
strings and tuples are immutable use [-1] to see last element
.split() put delimiter/where you want str to split in parens with ''
''.join() put delimiter/what to put between parts to join list together in quotes and variable of what you're joining in parens
list(variable) to see each individual part of str; can set another variable equal to in order to make a list of individual parts of a str

format(a,'0>8b') - converts "a" to binary and pads out to 8 bits with 0s - msgbin = format(ord(msg),'0>8b') - converts a msg to its binary and saves it to msgbin
ord('letter') - gives ascii value of letter
chr(ascii) - give letter back from ascii value

list(range()) - START, STOP, STEP - up to but not including
print(list[::-1] prints list in reverse order
dictionary made using curly brackets {} with 'key':value
to call value run variable['key'] - to add to dictionary run variable['newkey'] = value

fp.read(number) - return however many bytes as the number in parens

*args in function allows multiple inputs
**kwargs allows for names keywords with arguments

variable.lower() makes everything lowercase


counter = 0
enumerate()

BRANCHING
IF STATEMENTS
if <condition>:
    <indented code block>
elif <condition>:
    <indented code block>
else:
    <indented code block>
WHILE LOOPS (executes only while condition is true)
while <condition>:
  <code block>
FOR LOOPS
for item in <iterable>:
  <code block>

vim .vimrc (press i to insert text):
syntax enable
set tabstop=4
set shiftwidth=4
set expandtab
set number
filetype indent on
set autoindent

======================================================================================================================================

ACTIVITIES
cd
git clone https://git.cybbh.space/programming/python/public.git
cd public

EMAIL SPLIT ACTIVITY
email='name@somewhere.com'
user=email.split('@')
a='.'.join(user)
split=a.split('.')
print(split)  
FIZZBUZZ ACTIVITY
number = int(input('Enter a positive number: '))
if ((number%3)==0) and ((number%5)==0):
  print('fizzbuzz')
elif (number%3) == 0:
  print('fizz')
elif (number%5) == 0:
  print('buzz')
else:
  print(number)
GUESS THE NUMBER ACTIVITY
def guess_number(n):
     while True:
         x = int(input('Enter a Number Between 0 and 100: '))
         
         if x > n:
             print('too high')
             continue
         elif x < n:
             print('too low')
             continue
         if x == n:
             print('WIN')
             break
             
guess_number(23)

INVERT AND PLACE BACK INTO SAME LIST IN SAME POSITION
def invert(l);
    for n in range(0,len(l)):
        l[n] = str(255 - int(l[n]))
    pass
INVERTED - INVERT AND PLACE INTO DIFFERENT LIST
def inverted(l):
    result = []
    counts = 0 
    for num in l:
        result.append(str(255 - int(num)))
        counts += 1
    return result

COUNTER
counts = 0
for num in l:
    l[counts] = str(255-int(num))
    counts +=1

ENUMERATE
for count,num in enumerate(l):
    l[count] = str(255-int(num))

STEG ENCODE
def steg_encode_char(char, cover):
     msgbin = format(ord(char),'0>8b')
     for i in range(0,len(cover)):
         coverbin = list(format(int(cover[i]),'0>8b'))
         coverbin[-1] = msgbin[i]
         cover[i] = str(int(''.join(coverbin),base=2))
     pass

STEG DECODE
def steg_decode_char(stego):
    msgbits = []
    for b in stego:
        msgbits.append(bin(int(b))[-1])
    return chr(int(''.join(msgbits),2))

FIND TOTAL NUMBER OF CHARACTERS IN TEXT FILE
with open('textfile','r') as fp:
    num=len(fp.read())
FIND TOTAL NUMBER OF WORDS IN TEXT FILE
with open('textfile','r') as fp:
    num_words=len(fp.read().split())
FIND THE NUMBER OF LINES IN TEXT FILE
with open('textfile','r') as fp:
    num_lines=len(fp.readlines())
ASSIGN FIRST 30 CHARACTERS OF TEXT FILE TO NEW VARIABLE
with open('textfile','r') as fp:
    chars=fp.read(30)
ASSIGN 3RD WORD OF EACH LINE TO LIST FROM TEXT FILE
three=[]
with open('textfile','r') as fp:
    for i in fp.readlines():
        three.append(i.split()[2])
FIND SPECIFIC CHARACTER IN TEXT FILE AND ADD WORD CONTAINING SAID CHARACTER TO LIST
pwords=[]
with open('textfile','r') as fp:
    lines=fp.read()
    for i in lines.split():
        if 'p' in i:
            pwords.append(i)
