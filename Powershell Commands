#DAY 1

get-command
get-verb
Get-Command -Verb get
Get-Command -Noun process

Update-Help
Get-Help Get-Command -ShowWindow
Get-Help Get-Command -Online
get-help *net*
Get-Help about_*
get-help about_Script_Blocks -ShowWindow
Get-Process| Format-Table name, id
Get-Process| Format-List *
get-service | Format-Table -AutoSize   #expand on elipses(...)
Get-Service| Format-Table -wrap        #expand on elipses(...)

(Get-Process).GetType()
Get-Variable
$x=10 #declare variable
$x    #call variable
$x, $y, $z = "this", "that", "third"
remove-variable x, y, z
$name = "George"
"Hello my name is $name"
$hour=(get-date).Hour   #only runs command once and then stores that output into variable
$env:OS

$x = get-process
$x[4,6]    #displays processes in 4 and 6 index position
$y = "this"
$x -is [array]
$x.Count
$array = 1,2,3,4
$array[1]    #call parts of array by index value
$array[-1]   #call last item in array
$array[1..3]  #gives items in range for that array by index value
$array[1,3]   #return specific indexes
$array = += 7,8,9   #append array

$array1 = 1..4
$array2 = "World", "hello", 5, 10, (Get-Date)     #array can hold multiple data types
$array3 = @()    #define empty array

$jagarray = "joe", "jim", "jan", (1, ('apple', 'pear'), 3), "jay"     #jagged array
$jagarray[3][0]    #have to call both arrays; will display 1

$multiarray = @(
    (35.7219, 51.3347, "Tehran"),
    (39.9042, 116.4074, "Bejing"),
    (33.5138, 36.2765, "Damascus")
    )
$multiarray[1][2]   #displays Bejing

$muhlist = @{First = "george" ; last = "lucas"; mid = "yes"}     #defines hash table
$muhlist["first"]   #call by key
$muhlist.last       #call by key
$muhlist.Keys     #list all keys
$muhlist.Values   #list all values
$muhlist[$muhlist.keys]    #displays all values
$muhlist["Location"] = "Germany"  #append to hash table
$muhlist.date = Get-Date
$muhlist.Remove("date")

$list = @{ element1 = 5; array1 = 1..5; array2 = 6,7,8}    #array inside of hash table
$list.array1[0]     #call value in array in hash table; displays 1

#DAY 2

$date = {(Get-Date).Second}     #create script block
& $date    #call script block
$a = 1
$b = {1+1}
$a += &$b
$a

Get-Service | Sort-Object Status | ft -GroupBy status
Get-ChildItem | Group-Object Extension | Sort-Object Count -Descending
Get-Process | Group-Object {$_.Name.Substring(0,1).ToUpper()} | ForEach-Object{($_.Name + " ") *7; "=========="; $_.Group}
Get-Process | Select-Object -First 10
Get-Process | Sort-Object StartTime | Select-Object -Last 10 | ft ProcessName, StartTime
Get-Process | Select-Object Name,ID
Get-Service | Select-Object -ExcludeProperty Name         #Expand on elipses(...) for things that were cut off

#Where-Object
Get-Service | Where-Object{$_.Status -eq 'running'}       #Returns only the services running
Get-ChildItem *.txt | Where-Object{$_.Length -gt 100}
Get-Process | Where-Object {$_.Company -like 'micro*'} | ft Name, Description, Company

1,2,3,1,2,3,1,2,3 | sort-object | Get-Unique           #sort then unique

Get-ChildItem | Measure-Object Length          #number of files 
(Get-ChildItem).count        #Count objects in directories including directories

$array=1,2,3,4,5
$sum = 0
$array | ForEach-Object { $sum += $_ }
$sum

#Custom Objects
$mytruck = New-Object Object
Add-Member -MemberType NoteProperty -Name Color -Value Red -InputObject $mytruck
Add-Member -MemberType NoteProperty -in $mytruck -Name Make -Value Ford
Add-Member -InputObject $mytruck NoteProperty Model "F-1Shitty"
$mytruck | Add-Member NoteProperty Cab Supercrew
$mytruck
$mytruck.model
Add-Member -MemberType ScriptMethod -InputObject $mytruck -Name Drive -Value {"Going to the junkyard"}

$Soldier = [PSCustomObject]@{               #Create custom object in one go
    "FirstName" = "Joe"
    "LastName" = "Snuffy"
    "Rank" = "SSGT"
    "MOS" = "17C"
    "Position" = "Instructor"
    }

1,2,3 -eq 2     #returns every value that is eq
2 -eq 1,2,3     #returns false
"Powershell", "server" -like "*shell"     #returns Powershell
"Powershell", "server" -nlike "*shell"    #returns server
"Powershell" -like "*shell"               #returns true

$text = 'Here is the model number: MO5364'
$pattern = 'MO(\d{3})'     #each set of parens will be new key-value in $matches
$text -match $pattern      #returns true
$matches       #returns the value matched can call using index value

$fruit = 'apple','orange','pear','tomato'
$fruit -contains 'tomato'

$num = 5
(($num -gt 1) -and ($num -lt 10))     #returns true

If (condition) {
    #code to be executed if condition applies
}

$x = 11
if($x -gt 10){"$x is larger than 10"}
else{                                 #can use else or elseif
        "$x is smaller than 10"
        }

$time = Get-Date -Hour
Switch($time) {
  6 {"Morning"; break}
  12 {"Noon"; break}
  18 {"Evening"; break}
  22 {"Night"; break}
}

$nums = 1,2,3,4,5
$nums | ForEach-Object{$_ * 2}
Get-Process | Select-Object -First 10 | ForEach-Object { $_.Name } | ForEach-Object { $_.ToUpper() }
foreach ($item in gci C:\ -Recurse){$item.name}
foreach ($item in Get-Process | Select-Object -First 10){$item.name}
$teams = 'Tigers','pistons','red wings','lions'
foreach($x in $teams){"Detroit $x suck"}

while(condition) {
#code to be executed
}
$x = 0
while($x -lt 10) {
  Write-Host $x
  $x++
}

$ans = Read-Host -Prompt "Which character is the best?"
while(($ans = Read-Host -Prompt "Which character is the best?") -ne "The Hulk") {
    switch($ans) {
        "The Hulk" {"You are correct"}
        "The Flash" {"Wrong"; break}
        "Ironman" {"Wrong"; break}
    }
}

do {
    code block
}while(condition)


do {
$ans = Read-Host -Prompt "Which character is the best?"
    switch($ans) {
        "The Hulk" {"You are correct"}
        "The Flash" {"Wrong"; break}
        "Ironman" {"Wrong"; break}
    }
}while($ans -ne "The Hulk")

$num =0
do {
    $num
    $num ++
    }until($num -gt 3)

for (initialization; condition; increment)
{
    code block to be executed
}

for($i = 0; $i -le 255; i++) {
    Write-Host 192.168.0.$i
}

#DAY 3

Get-Service | Select-Object -First 10 | ForEach-Object{"The service {0} is call '{1}' : {2}" -f $_.Name, $_.DisplayName, $_.Status}

"{0:n3}" -f 123.45678    #rounds to 3
"{0:d5}" -f 123    #pads to 5 characters

"Hello John" -replace "John", "world"    #replaces john with world
'server1,server2,server3' -replace ',',';'   #replaces commas with semicolons
'[      Jon      Bon        Doe     ]' -replace '\s+', ' '
'192.168.0.1' -replace '\d{1,3}$', '255'     #replace last octet with 255
$list = 'comp1','comp10','comp13'
$pattern = 'comp(\d{1,3})'
$list -replace $pattern, 'Computer$1'     #replaces comp with computer and keeps the number following

$profile -split '\.'     #split on periods/decimals; to split on backslash use '\\'
$profile -split '(?=\.)'   #keeps the periods/decimals

"cat","dog" -join ""    #join two strings
$env:username, '@', $env:computername, ".", $env:userdomain -join ""     #make an email addr

"Powershell is Awesome!" -match "\w+(\?|!)"     #displays awesome
$matches

function <name> {
    code to execute
}

function test-it {
    'Hello World!'
}

test-it

function test-func {
    param(
        $param1='Default Value 1', $param2='Default Value 2'
        )
        "you entered $param1 and $param2"
}

test-func
test-func Hello World       #separate the 2 params you're trying to use with a space

function Do-Switch {
    param(
        [Switch]
        $DoSwitch
    )

    if ($DoSwitch) {
        'Switch is done'
    }
    else {
        'Switch off'
    }
}

Do-Switch
Do-Switch -DoSwitch

function test-me {
    param (
        [Parameter(Mandatory=$true)]
        $var
    )
    "Your name is $var"
}

test-me
test-me Greg

function Convert-ToDollars {
    param(
        [Parameter(Mandatory, HelpMessage='Enter number of Euros.')]
        [Double]
        $Euro
    )

    $Dollar = $Euro * 1.4
    $Dollar
}

function test-message {
    param (
        [Parameter(Mandatory=$true, HelpMessage='Enter a name please')]
        $var
    )
    "Your name is $var"
}

test-message
!? # Get Help Message
Bob

function check-user {
    [CmdletBinding(DefaultParameterSetName='A')]
    param (
        [Parameter(ParameterSetName='A',Mandatory=$true)]
        $name,

        [Parameter(ParameterSetName='B',Mandatory=$true)]
        $id,

        [Parameter(ParameterSetName='C',Mandatory=$true)]
        $username
    )
    $var = $PSCmdlet.ParameterSetName
    "The $var parameter set was chosen"
}

check-user
check-user -name Bob
check-user -id 1001
check-user -username b1001

Function Add-Soldier {                 #Have a function make a customobject
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)][string]$FirstName,
        [Parameter(Mandatory=$true)][string]$LastName,
        [Parameter(Mandatory=$true)][string]$Rank,
        [Parameter(Mandatory=$true)][string]$MOS,
        [Parameter(Mandatory=$true)][string]$Position
    )

        $Soldier = [PSCustomObject]@{
            "FirstName" = $FirstName
            "LastName"  = $LastName
            "Rank"      = $Rank
            "MOS"       = $MOS
            "Position"  = $Position
        }
    Return $Soldier
}

Add-Soldier

function Get-IPConfig {
    param(
        [Switch]$IP,
        [Switch]$Mac,
        [Switch]$All
    )
    Begin {
        Clear-Host
    }
    Process {
        if ($Mac) {
            ipconfig -all | Select-String "Physical"
        }
        elseif ($IP) {
            ipconfig -all | Select-String "IPv"
        }
        elseif ($all) {
            ipconfig -all
        }
        else {
            ipconfig
        }
    }
    End {
        "`n " + (Get-Date).DateTime
    }
}
Get-IPConfig



Invoke-WebRequest -Uri "10.50.34.170:8000/psexam.exe" -OutFile C:\Users\student\Downloads\psexam.exe
Invoke-WebRequest -Uri "10.50.34.170:8000/exam.ps1" -OutFile C:\Users\student\Downloads\exam.ps1
