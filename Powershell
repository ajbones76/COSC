https://cted.cybbh.io/tech-college/pns/public/pns/latest/guides/ps_sg.html  -  Powershell Student Guide
https://cted.cybbh.io/tech-college/pns/public/pns/latest/guides/WOBC_Student_Guide.html

xfreerdp /u:student /v:10.50.30.94 -dynamic-resolution +glyph-cache +clipboard  -  Windows VM - Password is password

powershell.exe is a wrapper for a dll of powershell called system.Management.Automation.dll
powershell is compatitble with other OS
Command structure verb noun
can run external commands as well
case insensitive
arguments in [] mandatory
single quotes literal string will show variable as $var instead of what is stored in variable

HELP SYSTEM

get-help  -  make sure help is in latest version  -  update-help
get-help <cmdlet>
get-help get-command -online
get-help about_*  -  about pages
get-help about_Script_Blocks -showWindow

Aliases

$Alias:<command>
get-alias  -  list of all aliases
get-alias -definition <command>  -  lists all aliases of the cmdlet
user defined  -  set-alias  <alias> -  creates alias  -  remove-item alias:<alias>  -  removes alias
user defined are not persistent through shutdown
powershell profiles can be used to make aliases persistent
environmental  -  already built-into system

Objects  -  everything in powershell is an object
made up of properties - describe an object - and methods - things an object can do
(get-process).process.name  -  property
(get-process).kill()  -  method
get-process | get-member  -  tells you all properties and methods
get-process | get-member -membertype properties  -  shows all properties of object
$_  -  pipeline variable

write-output  -  going through pipeline then to screen
write-host  -  going straight to host not through pipeline

VARIABLES

$<variable> = <value>
call variable with $
system variables  -  defined by system, always there
$_ or $PSItem  -  Object in current pipeline; $PSItem more consistent in functions
$False  -  False
$True  -  True
$Matches  -  Hash Table of RegEx matches
user defined variables  -  not persistent through reboot
("Hello").gettype().name  -  get the data type
$env:<variable>  -  environmental variables
escape character is grave `

ARRAYS
not restricted to just one value type
an array can have multiple arrays inside of it

$jagarray = "joe", "jim", "jan", (1, ('apple', 'pear'), 3), "jay"     #jagged array
$jagarray[3][0]    #have to call both arrays; will display 1

$multiarray = @(
    (35.7219, 51.3347, "Tehran"),
    (39.9042, 116.4074, "Bejing"),
    (33.5138, 36.2765, "Damascus")
    )
$multiarray[1][2]   #displays Bejing

Hash Tables  -  dictionary; key-value pairs

separate key-value pairs with semicolon ;
any type of data can be put in hash table
$muhlist = @{First = "george" ; last = "lucas"; mid = "yes"}     #defines hash table
$muhlist["first"]   #call by key
$muhlist.last       #call by key
$muhlist.Keys     #list all keys
$muhlist.Values   #list all values
$muhlist[$muhlist.keys]    #displays all values

$list = @{ element1 = 5; array1 = 1..5; array2 = 6,7,8}    #array inside of hash table
$list.array1[0]     #call value in array in hash table; displays 1

======================================================================================================================================
DAY 2

$date = {(Get-Date).Second}     #create script block
& $date    #call script block
$a = 1
$b = {1+1}
$a += &$b
$a

SORTING

Get-ChildItem | Sort-Object -Property Length -Descending     #Sort files by size, biggest to smallest
sort then groupby to avoid multiple blocks
-like comparison operator accepts wildcards
-match uses regex

Get-Service | Sort-Object Status | ft -GroupBy status
Get-ChildItem | Group-Object Extension | Sort-Object Count -Descending
Get-Process | Group-Object {$_.Name.Substring(0,1).ToUpper()} | ForEach-Object{($_.Name + " ") *7; "=========="; $_.Group}
Get-Process | Select-Object -First 10
Get-Process | Sort-Object StartTime | Select-Object -Last 10 | ft ProcessName, StartTime
Get-Process | Select-Object Name,ID
Get-Service | Select-Object -ExcludeProperty Name         #Expand on elipses(...) for things that were cut off

Where-Object

Get-Service | Where-Object{$_.Status -eq 'running'}       #Returns only the services running
Get-ChildItem *.txt | Where-Object{$_.Length -gt 100}
Get-Process | Where-Object {$_.Company -like 'micro*'} | ft Name, Description, Company

1,2,3,1,2,3,1,2,3 | sort-object | Get-Unique           #sort then unique

Get-ChildItem | Measure-Object Length          #number of files 
(Get-ChildItem).count        #Count objects in directories including directories

$array=1,2,3,4,5
$sum = 0
$array | ForEach-Object { $sum += $_ }
$sum

CUSTOM OBJECTS

$mytruck = New-Object Object
Add-Member -MemberType NoteProperty -Name Color -Value Red -InputObject $mytruck
Add-Member -MemberType NoteProperty -in $mytruck -Name Make -Value Ford
Add-Member -InputObject $mytruck NoteProperty Model "F-1Shitty"
$mytruck | Add-Member NoteProperty Cab Supercrew
$mytruck
$mytruck.model
Add-Member -MemberType ScriptMethod -InputObject $mytruck -Name Drive -Value {"Going to the junkyard"}

$Soldier = [PSCustomObject]@{               #Create custom object in one go
    "FirstName" = "Joe"
    "LastName" = "Snuffy"
    "Rank" = "SSGT"
    "MOS" = "17C"
    "Position" = "Instructor"
    }

COMPARISON OPERATORS - i for inverse

-eq                 Equals
-ne                 Not Equal
-gt                 Greater Than
-lt                 Less Than
-ge                 Greater Than or Equal To
-le                 Less Than or Equal To
-contains           Contains (used for a collection of items)
-match              Matches anywhere in the string
-like               Both sides of expression are identical
-in                 Returns true when value is contained within a collection
-replace            Replaces a string pattern
-is                 Returns true if both objects are the same type

1,2,3 -eq 2     #returns every value that is eq
2 -eq 1,2,3     #returns false
"Powershell", "server" -like "*shell"     #returns Powershell
"Powershell", "server" -nlike "*shell"    #returns server
"Powershell" -like "*shell"               #returns true

$text = 'Here is the model number: MO5364'
$pattern = 'MO(\d{3})'     #each set of parens will be new key-value in $matches
$text -match $pattern      #returns true
$matches       #returns the value matched can call using index value

$fruit = 'apple','orange','pear','tomato'
$fruit -contains 'tomato'

$num = 5
(($num -gt 1) -and ($num -lt 10))     #returns true

If (condition) {
    #code to be executed if condition applies
}

$x = 11
if($x -gt 10){"$x is larger than 10"}
else{                                 #can use else or elseif
        "$x is smaller than 10"
        }

$time = Get-Date -Hour
Switch($time) {
  6 {"Morning"; break}
  12 {"Noon"; break}
  18 {"Evening"; break}
  22 {"Night"; break}
}

$nums = 1,2,3,4,5
$nums | ForEach-Object{$_ * 2}
Get-Process | Select-Object -First 10 | ForEach-Object { $_.Name } | ForEach-Object { $_.ToUpper() }
foreach ($item in gci C:\ -Recurse){$item.name}
foreach ($item in Get-Process | Select-Object -First 10){$item.name}
$teams = 'Tigers','pistons','red wings','lions'
foreach($x in $teams){"Detroit $x suck"}

foreach-object needs something piped into it

while(condition) {
#code to be executed
}
$x = 0
while($x -lt 10) {
  Write-Host $x
  $x++
}

$ans = Read-Host -Prompt "Which character is the best?"
while(($ans = Read-Host -Prompt "Which character is the best?") -ne "The Hulk") {
    switch($ans) {
        "The Hulk" {"You are correct"}
        "The Flash" {"Wrong"; break}
        "Ironman" {"Wrong"; break}
    }
}

do {
    code block
}while(condition)


do {
$ans = Read-Host -Prompt "Which character is the best?"
    switch($ans) {
        "The Hulk" {"You are correct"}
        "The Flash" {"Wrong"; break}
        "Ironman" {"Wrong"; break}
    }
}while($ans -ne "The Hulk")

$num =0
do {
    $num
    $num ++
    }until($num -gt 3)

for (initialization; condition; increment)
{
    code block to be executed
}

for($i = 0; $i -le 255; i++) {
    Write-Host 192.168.0.$i
}

=====================================================================================================================================
DAY 3

STRING MANIPULATION

The backtick character,"`", does two things: - If typed before characters like "$" or quotation marks, Powershell will interpret the characters following the backtick as normal

`n            New Line
`t            Tabulator (Tab)
`b            Backspace
`â€™            Single Quotation Mark
`"            Double Quotation Mark
`0            Null
``            Backtick Character

$text1 = "One Terabyte is $(1TB / 1GB) Gigabytes"
$text1

HERE STRINGS

Here-strings are used for text consisting of several lines and/or special characters. Here-Strings give you the ability to store exactly what you want in a variable. PowerShell will automatically resolve variables in Here-Strings

$text = @"
Here is some text with `"quotes`".        #don't need to use ` on the quotes in a here string
1TB equals $(1TB / 1GB) GB.
Variables are resolved
"$PWD" is your current path
"@
$text

String Operators

-f                  Format String Expression
-replace            replaces strings
-split              Splits a string
-join               Joins multiple strings

String Methods

.Split()            splits strings
.Replace()          replaces strings
.StartsWith()       Determines whether this string instance starts with the specified character.
.EndsWith           Determines whether the end of this string instance matches the specified character.
.ToLower()          Convert string to lower case
.ToUpper()          Conert String to upper case

Regex

.            Any character except newline
[^abc]       All characters except one specified
[^a-z]       All characters expect ones in range specified
[abc]        One of the characters
[a-z]        One of the characters in range
\d           Any number [0-9]
\D           Any non-number
\n           Line Break
\r           Carriage return
\s           Any whitespace (space, tab, new line)
\S           Any non-whitespace
\t           tab
\w           Letter, number or underline
W            Non-letter, number, or underline

FUNCTIONS

function <name> {
    code to execute
}



Mandatory parameters prefix parameter variables with    -    [Parameter(Mandatory=$true)]$FirstName
By default, without this prefix the parameter is optional
Adding Mandatory parameter to a script will prompt the user if not provided
Windows PowerShell uses ParamterSets to define groups of parameters. You can choose between which parameter groups to use but you cannot mix the parameters that are in different groups

ADVANCED FUNCTIONS

function bare-bones {
    [CmdletBinding()]
    Param(
        <Define Parameters>
    )
    Begin {
        <code>
    }
    Process {
        <code>
    }
    End {
        <code>
    }
}
These are designed to work like cmdlets. They consist of a $PROCESS* block with optional BEGIN and/or END blocks.
Function Blocks
BEGIN          Called prior to processing anything in the pipeline.
PROCESS        Called once for each object in the pipeline.
END            Called after all the objects in the pipeline have been processed

