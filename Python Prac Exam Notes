def q1(floatstr):               #20%
  4     fltlist = []
  5     for y in floatstr.split(','):
  6     fltlist.append(float(y))
  7     return fltlist
  8 
  9             # '''
 10             # TLO: 112-SCRPY002, LSA 3,4
 11             #    Given the floatstr, which is a comma separated string of
 12             #    floats, return a list with each of the floats in the 
 13             #    argument as elements in the list.
 14             #    '''
 15 
 16 def q2(*args):             #0%
 17     s =0
        for arg in args:
          s+= arg
        return s/len(args)

        OR return sum(args)/len(args)

 18     TLO: 112-SCRPY006, LSA 3
 19     TLO: 112-SCRPY007, LSA 4
 20     Given the variable length argument list, return the average
 21     of all the arguments as a float
 22     '''
 23 
 24 
 25 def q3(lst,n):              #20%
 26     
 27     
 28     return lst[-n:]
 29 
 30     #'''
 31     #TLO: 112-SCRPY004, LSA 3
 32     #Given a list (lst) and a number of items (n), return a new 
 33     #list containing the last n entries in lst.
 34     #'''
 35 def q4(strng):                          #0%
      newlist = []
      for i in string:
        newlist.append(ord(i))
      return newlist

 37     '''
 38     TLO: 112-SCRPY004, LSA 1,2
 39     TLO: 112-SCRPY006, LSA 3
 40     Given an input string, return a list containing the ordinal numbers of 
 41     each character in the string in the order found in the input string.
 42     '''
 43     pass
 44 
 45 def q5(strng):                          #100%
 46     word = ()
 47     word = tuple(strng.split(' '))
 48     return word
        
        OR return tuple(strng.split())



 49 
 50     '''
 51     TLO: 112-SCRPY002, LSA 1,3
 52     TLO: 112-SCRPY004, LSA 2
 53     Given an input string, return a tuple with each element in the tuple
 54     containing a single word from the input string in order.
 55     '''
 56     pass
 57 
 58 def q6(catalog, order):             #0%
        total = []
        for key in catalog:
 61         for item in order:
 62             if item[0] == key:
 63                 total.append(catalog[key] * item[1]
 64     return sum(total)

          OR
        total = 0
        for product,quantity in order:
            total += catalog[product] * quantity
        return total

          OR
        total = []
        for product, price in catalog.items():
            for orderp, quantity in order:
                if product == orderp:
                    total.append(quantity * price)
        return sum(total)


 59     '''
 60     TLO: 112-SCRPY007, LSA 2
 61     Given a dictionary (catalog) whose keys are product names and values are product
 62     prices per unit and a list of tuples (order) of product names and quantities,
 63     compute and return the total value of the order.
 64 
 65     Example catalog:
 66     {
 67         'AMD Ryzen 5 5600X': 289.99,
 68         'Intel Core i9-9900K': 363.50,
 69         'AMD Ryzen 9 5900X': 569.99
                     }
 71 
 72     Example order:
 73     [
 74         ('AMD Ryzen 5 5600X', 5), 
 75         ('Intel Core i9-9900K', 3)
 76     ]
 77 
 78     Example result:
 79     2540.45 
 80 
 81     How the above result was computed:
 82     (289.99 * 5) + (363.50 * 3)
 83     '''
 84     pass
 85 
 86 def q7(filename):                               #100%
 87     with open('filename','r') as fp:
 88         linelngth = (len(fp.readline()) - 1)
 89     return linelngth
 90 '''
 91     TLO: 112-SCRPY005, LSA 1
 92     Given a filename, open the file and return the length of the first line 
 93     in the file excluding the line terminator.
 94     '''
 95 
 96 def q8(filename,lst):               #0%
 97     with open('filename','w') as fp:
 98         for entry in lst:
 99             if entry.lower() == 'stop':
100                 break
102             fp.write(f'{entry}\n')
103                 
105     '''
106     TLO: 112-SCRPY003, LSA 1
107     TLO: 112-SCRPY004, LSA 1,2
108     TLO: 112-SCRPY005, LSA 1
109     Given a filename and a list, write each entry from the list to the file
110     on separate lines until a case-insensitive entry of "stop" is found in 
111     the list. If "stop" is not found in the list, write the entire list to 
112     the file on separate lines.
113     '''
114     pass
115 
116 def q9(miltime):                        #100%
117     if miltime in range(259,1159,1):
118         return 'Good Morning'
119     elif miltime in range(1200,1559,1):
120         return 'Good Afternoon'
121     elif miltime in range(1600,2100,1):
122         return 'Good Evening'
123     else:
124        return 'Good Night'
        OR
        if miltime >= 301 and miltime < 1200:
          return 'Good Morning'
        elif miltime >= 1200 and miltime < 1600:
          return 'Good Afternoon'
        

125 
126 
127     '''
128     TLO: 112-SCRPY003, LSA 1
129     Given the military time in the argument miltime, return a string 
130     containing the greeting of the day.
131     0300-1159 "Good Morning"
132     1200-1559 "Good Afternoon"
133     1600-2059 "Good Evening"
134     2100-0259 "Good Night"
135     '''
136     pass
137 
138 def q10(numlist):               #60%
        for i in numlist:        
            if i 0:
                return False
            return True

143 
144     '''
145     TLO: 112-SCRPY003, LSA 1
146     TLO: 112-SCRPY004, LSA 1
147     Given the argument numlist as a list of numbers, return True if all 
148     numbers in the list are NOT negative. If any numbers in the list are
149     negative, return False.
150     '''
151     pass
152 
                                                                                                                                                                                                                                 
